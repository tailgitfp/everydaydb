(undo-tree-save-format-version . 1)
"81a67891417ac20f0edd8c58401853683dd92ae4"
[nil nil nil nil (25887 4375 122971 183000) 0 nil]
([nil nil ((1 . 3) (t . -1)) nil (25887 4375 122969 950000) 0 nil])
([nil nil ((#("1" 0 1 (fontified t)) . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -1) (#("\\" 0 1 (fontified t)) . -2) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (undo-tree-id305 . -1) 3) nil (25887 4375 122968 544000) 0 nil])
([nil nil ((1 . 2)) nil (25887 4375 122948 998000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 1 9 nil (#s(yas--mirror 10 18 (make-string (string-width yas-text) 61) nil #s(yas--exit 20 nil) nil)) nil nil #s(yas--mirror 10 18 (make-string (string-width yas-text) 61) nil #s(yas--exit 20 nil) nil))) #s(yas--exit 20 nil) 2 nil #s(yas--field 1 1 9 nil (#s(yas--mirror 10 18 (make-string (string-width yas-text) 61) nil #s(yas--exit 20 nil) nil)) nil nil #s(yas--mirror 10 18 (make-string (string-width yas-text) 61) nil #s(yas--exit 20 nil) nil)) nil nil)) (1 . 20) (#("1" 0 1 (fontified t)) . -1) (undo-tree-id268 . -1) (undo-tree-id269 . -1) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) 2) nil (25887 4375 122948 80000) 0 nil])
([nil nil ((apply yas--snippet-revive 1 20 #s(yas--snippet nil (#s(yas--field 1 1 9 nil (#s(yas--mirror 10 18 (make-string (string-width yas-text) 61) nil #s(yas--exit 20 nil) nil)) nil nil #s(yas--mirror 10 18 (make-string (string-width yas-text) 61) nil #s(yas--exit 20 nil) nil))) #s(yas--exit 20 nil) 2 nil #s(yas--field 1 1 9 nil (#s(yas--mirror 10 18 (make-string (string-width yas-text) 61) nil #s(yas--exit 20 nil) nil)) nil nil #s(yas--mirror 10 18 (make-string (string-width yas-text) 61) nil #s(yas--exit 20 nil) nil)) nil nil))) nil (25887 4375 122940 311000) 0 nil])
([nil nil ((#("1" 0 1 (markdown-heading (1 18 1 9 10 18 #<buffer README.md<data>>) markdown-heading-1-setext (1 18 1 9 10 18 #<buffer README.md<data>>) fontified t face markdown-header-face-1 font-lock-multiline t)) . -8) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) 9) nil (25887 4375 122939 607000) 0 nil])
([nil nil ((#("H" 0 1 (fontified t markdown-heading (1 11 1 2 3 11 #<buffer README.md<data>>) markdown-heading-1-setext (1 11 1 2 3 11 #<buffer README.md<data>>) face markdown-header-face-1 font-lock-multiline t)) . -1) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (#("e" 0 1 (fontified t markdown-heading (1 12 1 3 4 12 #<buffer README.md<data>>) markdown-heading-1-setext (1 12 1 3 4 12 #<buffer README.md<data>>) face markdown-header-face-1 font-lock-multiline t)) . -2) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (#("a" 0 1 (fontified t markdown-heading (1 13 1 4 5 13 #<buffer README.md<data>>) markdown-heading-1-setext (1 13 1 4 5 13 #<buffer README.md<data>>) face markdown-header-face-1 font-lock-multiline t)) . -3) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (#("d" 0 1 (fontified t markdown-heading (1 14 1 5 6 14 #<buffer README.md<data>>) markdown-heading-1-setext (1 14 1 5 6 14 #<buffer README.md<data>>) face markdown-header-face-1 font-lock-multiline t)) . -4) (undo-tree-id233 . -1) (undo-tree-id234 . -1) (undo-tree-id235 . -1) (undo-tree-id236 . -1) (undo-tree-id237 . -1) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (#("e" 0 1 (fontified t markdown-heading (1 15 1 6 7 15 #<buffer README.md<data>>) markdown-heading-1-setext (1 15 1 6 7 15 #<buffer README.md<data>>) face markdown-header-face-1 font-lock-multiline t)) . -5) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (undo-tree-id252 . -1) (#("r" 0 1 (fontified t markdown-heading (1 16 1 7 8 16 #<buffer README.md<data>>) markdown-heading-1-setext (1 16 1 7 8 16 #<buffer README.md<data>>) face markdown-header-face-1 font-lock-multiline t)) . -6) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (undo-tree-id258 . -1) (undo-tree-id259 . -1) (#(" " 0 1 (fontified t markdown-heading (1 17 1 8 9 17 #<buffer README.md<data>>) markdown-heading-1-setext (1 17 1 8 9 17 #<buffer README.md<data>>) face markdown-header-face-1 font-lock-multiline t)) . -7) (undo-tree-id260 . -1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) 8) nil (25887 4375 122933 579000) 0 nil])
([nil nil ((1 . 8)) nil (25887 4375 121523 157000) 0 nil])
([nil nil ((18 . 19)) nil (25887 4375 121522 726000) 0 nil])
([nil nil ((19 . 26)) nil (25887 4375 121522 52000) 0 nil])
([nil nil ((#("n" 0 1 (fontified t)) . -23) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (#("b" 0 1 (fontified t)) . -24) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (#("g" 0 1 (fontified t)) . -25) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) 26) nil (25887 4375 121520 604000) 0 nil])
([nil nil ((23 . 24)) nil (25887 4375 121503 339000) 0 nil])
([nil nil ((24 . 31)) nil (25887 4375 121502 859000) 0 nil])
([nil nil ((29 . 35)) nil (25887 4375 121502 455000) 0 nil])
([nil nil ((37 . 39)) nil (25887 4375 121501 955000) 0 nil])
([nil nil ((39 . 60)) nil (25887 4375 121501 483000) 0 nil])
([nil nil ((60 . 63)) nil (25887 4375 121500 964000) 0 nil])
([nil nil ((63 . 64)) nil (25887 4375 121500 427000) 0 nil])
([nil nil ((19 . 22)) nil (25887 4375 121499 957000) 0 nil])
([nil nil ((67 . 72)) nil (25887 4375 121499 488000) 0 nil])
([nil nil ((72 . 91)) nil (25887 4375 121499 48000) 0 nil])
([nil nil ((91 . 112)) nil (25887 4375 121498 627000) 0 nil])
([nil nil ((112 . 121)) nil (25887 4375 121498 227000) 0 nil])
([nil nil ((121 . 122)) nil (25887 4375 121497 813000) 0 nil])
([nil nil ((121 . 142)) nil (25887 4375 121497 381000) 0 nil])
([nil nil ((142 . 145)) nil (25887 4375 121496 870000) 0 nil])
([nil nil ((145 . 146)) nil (25887 4375 121495 563000) 0 nil])
([nil nil ((146 . 147)) nil (25887 4375 121495 106000) 0 nil])
([nil nil ((147 . 148)) nil (25887 4375 121494 625000) 0 nil])
([nil nil ((148 . 169)) nil (25887 4375 121493 963000) 0 nil])
([nil nil ((169 . 174)) nil (25887 4375 121493 448000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t markdown-list-item ((147 174 0 3 "3. " nil (147 150 147 147 147 149 149 150))))) . -173) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) 174) nil (25887 4375 121492 637000) 0 nil])
([nil nil ((173 . 178)) nil (25887 4375 121488 837000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t markdown-list-item ((147 178 0 3 "3. " nil (147 150 147 147 147 149 149 150))))) . -161) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) 162) nil (25887 4375 121488 121000) 0 nil])
([nil nil ((161 . 162)) nil (25887 4375 121484 664000) 0 nil])
([nil nil ((179 . 180)) nil (25887 4375 121484 74000) 0 nil])
([nil nil ((180 . 181)) nil (25887 4375 121483 307000) 0 nil])
([nil nil ((apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 182 182 nil nil nil t #s(yas--exit 187 nil))) #s(yas--exit 187 nil) 3 nil #s(yas--field 1 182 182 nil nil nil t #s(yas--exit 187 nil)) nil nil)) (180 . 196) (#("2" 0 1 (fontified t)) . -180) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) 181) nil (25887 4375 121482 1000) 0 nil])
([nil nil ((apply yas--snippet-revive 180 187 #s(yas--snippet nil (#s(yas--field 1 182 182 nil nil nil t #s(yas--exit 187 nil))) #s(yas--exit 187 nil) 3 nil #s(yas--field 1 182 182 nil nil nil t #s(yas--exit 187 nil)) nil nil)) (#(" " 0 1 (fontified t markdown-heading (180 186 nil nil nil nil nil nil 180 184 184 186 #<buffer README.md<data>>) markdown-heading-2-atx (180 186 nil nil nil nil nil nil 180 184 184 186 #<buffer README.md<data>>) face markdown-header-delimiter-face)) . -182) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . 1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (#("H" 0 1 (fontified t markdown-heading (180 187 nil nil nil nil nil nil 180 183 183 184 184 187 #<buffer README.md<data>>) markdown-heading-2-atx (180 187 nil nil nil nil nil nil 180 183 183 184 184 187 #<buffer README.md<data>>) face markdown-header-face-2)) . -183) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("e" 0 1 (fontified t markdown-heading (180 188 nil nil nil nil nil nil 180 183 183 185 185 188 #<buffer README.md<data>>) markdown-heading-2-atx (180 188 nil nil nil nil nil nil 180 183 183 185 185 188 #<buffer README.md<data>>) face markdown-header-face-2)) . -184) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (#("a" 0 1 (fontified t markdown-heading (180 189 nil nil nil nil nil nil 180 183 183 186 186 189 #<buffer README.md<data>>) markdown-heading-2-atx (180 189 nil nil nil nil nil nil 180 183 183 186 186 189 #<buffer README.md<data>>) face markdown-header-face-2)) . -185) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (#("d" 0 1 (fontified t markdown-heading (180 190 nil nil nil nil nil nil 180 183 183 187 187 190 #<buffer README.md<data>>) markdown-heading-2-atx (180 190 nil nil nil nil nil nil 180 183 183 187 187 190 #<buffer README.md<data>>) face markdown-header-face-2)) . -186) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (#("e" 0 1 (fontified t markdown-heading (180 191 nil nil nil nil nil nil 180 183 183 188 188 191 #<buffer README.md<data>>) markdown-heading-2-atx (180 191 nil nil nil nil nil nil 180 183 183 188 188 191 #<buffer README.md<data>>) face markdown-header-face-2)) . -187) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (#("r" 0 1 (fontified t markdown-heading (180 192 nil nil nil nil nil nil 180 183 183 189 189 192 #<buffer README.md<data>>) markdown-heading-2-atx (180 192 nil nil nil nil nil nil 180 183 183 189 189 192 #<buffer README.md<data>>) face markdown-header-face-2)) . -188) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (#(" " 0 1 (fontified t markdown-heading (180 193 nil nil nil nil nil nil 180 183 183 189 189 193 #<buffer README.md<data>>) markdown-heading-2-atx (180 193 nil nil nil nil nil nil 180 183 183 189 189 193 #<buffer README.md<data>>) face markdown-header-delimiter-face)) . -189) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (#("1" 0 1 (fontified t markdown-heading (180 194 nil nil nil nil nil nil 180 183 183 191 191 194 #<buffer README.md<data>>) markdown-heading-2-atx (180 194 nil nil nil nil nil nil 180 183 183 191 191 194 #<buffer README.md<data>>) face markdown-header-face-2)) . -190) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) 191) nil (25887 4375 120933 673000) 0 nil])
([nil nil ((182 . 187)) nil (25887 4375 119738 685000) 0 nil])
([nil nil ((191 . 201)) nil (25887 4375 119738 57000) 0 nil])
([nil nil ((#("o" 0 1 (fontified t markdown-list-item ((191 201 0 3 "1. " nil (191 194 191 191 191 193 193 194))))) . -200) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) 201) nil (25887 4375 119737 241000) 0 nil])
([nil nil ((200 . 210)) nil (25887 4375 119731 352000) 0 nil])
([nil nil ((210 . 212)) nil (25887 4375 119730 735000) 0 nil])
([nil nil ((#("e" 0 1 (fontified t markdown-list-item ((191 212 0 3 "1. " nil (191 194 191 191 191 193 193 194))))) . -211) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) 212) nil (25887 4375 119729 884000) 0 nil])
([nil nil ((211 . 232)) nil (25887 4375 119723 999000) 0 nil])
([nil nil ((232 . 241)) nil (25887 4375 119723 491000) 0 nil])
([nil nil ((241 . 251)) nil (25887 4375 119722 724000) 0 nil])
([nil current ((#("
" 0 1 (fontified t)) . 251) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (#(" " 0 1 (fontified t markdown-list-item ((191 251 0 3 "1. " nil (191 194 191 191 191 193 193 194))))) . 250) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) 251) nil (25887 4375 119719 270000) 0 nil])
nil
